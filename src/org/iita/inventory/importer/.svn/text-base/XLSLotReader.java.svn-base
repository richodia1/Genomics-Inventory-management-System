/**
 * inventory.Struts Jul 3, 2009
 */
package org.iita.inventory.importer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.iita.inventory.model.Lot;
import org.iita.inventory.model.SeedLot;

/**
 * Read lot information from XLS file
 * 
 * @author mobreza
 */
public class XLSLotReader implements LotReader {
	/**
	 * Exported columns
	 */
	private static final String[] EXPORTED_COLUMNS = new String[] { "Name", "Prefix", "Quantity", "Scale", "Container", "Location in the store",
			"Location on shelve", "Regeneration location", "Germination %", "Germination date", "Harvest date", "Moisture content %FWB", "Planting date",
			"Seed Tested", "Storage type", "Virus free", "Weight", "100 Seed weight", "Year processed", "Lot ID", "Barcode", "Conformity" };

	private static Log LOG = LogFactory.getLog(XLSLotReader.class);

	/**
	 * @throws LotReaderException
	 * @see org.iita.inventory.importer.LotReader#readLots(java.io.File)
	 */
	@Override
	public List<? extends Lot> readLots(File sourceFile) throws LotReaderException {
		HSSFWorkbook workbook = null;
		try {
			workbook = new HSSFWorkbook(new FileInputStream(sourceFile));
		} catch (FileNotFoundException e) {
			LOG.error(e);
			throw new LotReaderException(e);
		} catch (IOException e) {
			LOG.error(e);
			throw new LotReaderException(e);
		}
		HSSFSheet sheet = workbook.getSheetAt(workbook.getActiveSheetIndex());
		// get top row
		HSSFRow row = sheet.getRow(0);
		if (!topRowValid(row))
			throw new LotReaderException("First row does not contain expected information. Make sure your lot file was generated by this system!");

		return importLots(sheet);
	}

	/**
	 * Reads lot information from Sheet
	 * 
	 * @param sheet
	 * @return
	 * @throws LotReaderException
	 */
	private List<Lot> importLots(HSSFSheet sheet) throws LotReaderException {
		ArrayList<Lot> lots = new ArrayList<Lot>();

		int lastRowNum = sheet.getLastRowNum();
		LOG.debug("Reading rows from 1 to " + lastRowNum);
		for (int rowIndex = 1; rowIndex <= lastRowNum; rowIndex++) {
			HSSFRow row = sheet.getRow(rowIndex);

			if (row == null) {
				LOG.debug("Skipping empty row " + rowIndex);
				continue;
			}

			try {
				Lot lot = importLot(row);
				if (lot != null)
					lots.add(lot);
			} catch (LotReaderException e) {
				LOG.error(e);
				throw new LotReaderException("Error reading lot from row " + (rowIndex + 1) + ": " + e.getMessage(), e);
			} catch (IllegalStateException e) {
				LOG.error(e);
				throw new LotReaderException("Error reading lot from row " + (rowIndex + 1) + ": " + e.getMessage(), e);
			} catch (NullPointerException e) {
				LOG.error(e);
				throw new LotReaderException("Error reading lot from row " + (rowIndex + 1) + ": Required cell value is empty.", e);
			}
		}

		LOG.debug("Got " + lots.size() + " lots in the file");
		return lots;
	}

	/**
	 * @param row
	 * @return
	 * @throws LotReaderException
	 */
	private Lot importLot(HSSFRow row) throws LotReaderException {
		// return null if lot id column is empty
		if (row.getCell(19) == null)
			return null;
		SeedLot lot = new SeedLot();
		lot.setId((Long) (long) row.getCell(19).getNumericCellValue());
		if (row.getCell(21) != null)
			try {
				lot.setConformity(row.getCell(21).getBooleanCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Conformity not boolean. " + e.getMessage(), e);
			}
		if (row.getCell(18) != null)
			try {
				lot.setYearProcessed((long) row.getCell(18).getNumericCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Year processed not numeric. " + e.getMessage(), e);
			}
		if (row.getCell(17) != null)
			try {
				lot.setWeight100(row.getCell(17).getNumericCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("100 seed weight not numeric. " + e.getMessage(), e);
			}
		if (row.getCell(16) != null)
			try {
				lot.setWeight(row.getCell(16).getNumericCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Weight not numeric. " + e.getMessage(), e);
			}
		if (row.getCell(15) != null)
			try {
				lot.setVirusFree(row.getCell(15).getBooleanCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Virus free not boolean. " + e.getMessage(), e);
			}
		if (row.getCell(14) != null)
			try {
				lot.setStorageType(row.getCell(14).getRichStringCellValue().getString());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Storage type not a string. " + e.getMessage(), e);
			}
		if (row.getCell(13) != null)
			try {
				lot.setSeedTested(row.getCell(13).getBooleanCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Seed tested not boolean. " + e.getMessage(), e);
			}
		if (row.getCell(12) != null)
			try {
				lot.setPlantingDate(row.getCell(12).getDateCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Planting date not a date. " + e.getMessage(), e);
			}
		if (row.getCell(11) != null)
			try {
				lot.setMoistureContent(row.getCell(11).getNumericCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Moisture content not numeric. " + e.getMessage(), e);
			}
		if (row.getCell(10) != null)
			try {
				lot.setHarvestDate(row.getCell(10).getDateCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Harvest date not a date. " + e.getMessage(), e);
			}
		if (row.getCell(9) != null)
			try {
				lot.setGerminationDate(row.getCell(9).getDateCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Germination date not a date. " + e.getMessage(), e);
			}
		if (row.getCell(8) != null)
			try {
				lot.setGermination(row.getCell(8).getNumericCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Germination not numeric. " + e.getMessage(), e);
			}
		if (row.getCell(7) != null)
			try {
				lot.setFieldLocation(row.getCell(7).getRichStringCellValue().getString());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Field location not a string. " + e.getMessage(), e);
			}
		if (row.getCell(3) != null)
			try {
				lot.setScale(row.getCell(3).getRichStringCellValue().getString());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Scale not a string. " + e.getMessage(), e);
			}
		if (row.getCell(2) != null)
			try {
				lot.setQuantity(row.getCell(2).getNumericCellValue());
			} catch (IllegalStateException e) {
				throw new LotReaderException("Quantity not numeric. " + e.getMessage(), e);
			}
		return lot;
	}

	/**
	 * @param row
	 * @return
	 * @throws LotReaderException
	 */
	private boolean topRowValid(HSSFRow row) throws LotReaderException {
		if (row == null) {
			throw new LotReaderException("First row is null");
		}
		try {
			LOG.debug("Expecting " + EXPORTED_COLUMNS.length + " columns");

			for (int i = 0; i < EXPORTED_COLUMNS.length; i++) {
				String header = row.getCell(i).getStringCellValue();
				if (header == null)
					continue;
				if (!header.equalsIgnoreCase(EXPORTED_COLUMNS[i]))
					throw new LotReaderException("Column " + (i + 1) + " must be '" + EXPORTED_COLUMNS[i] + "'. It is now '" + header + "'.");
			}

			if (row.getLastCellNum() <= EXPORTED_COLUMNS.length) {
				LOG.error("Expecting " + EXPORTED_COLUMNS.length + " columns, got " + (row.getLastCellNum()));
				throw new LotReaderException("Number of columns does not match original!");
			}

		} catch (LotReaderException e) {
			throw e;
		} catch (Exception e) {
			throw new LotReaderException(e);
		}

		return true;
	}
}
